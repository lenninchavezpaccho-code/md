"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
M√ìDULO FASE 5: DOCUMENTACI√ìN Y VISUALIZACI√ìN FINAL [VERSI√ìN COMPLETA]
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Objetivos:
1. Crear gr√°ficos de publicaci√≥n (Forest plots, Heatmaps)
2. Generar tablas estilo Stargazer/APA
3. Crear codebook de variables
4. Generar reporte ejecutivo consolidado
5. Documentar reproducibilidad completa
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""

# Importar configuraci√≥n y resultados
try:
    from modulo_0_config import CONFIG, OUTPUT_DIR
    from modulo_fase32_estimacion import resultados_modelos
    print("‚úÖ Configuraci√≥n y modelos importados")
except ImportError as e:
    print(f"‚ö†Ô∏è  Error al importar m√≥dulos: {e}")
    print("‚ö†Ô∏è  Ejecuta primero m√≥dulos anteriores")
    raise

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import os
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de gr√°ficos
sns.set_style('whitegrid')
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 11
plt.rcParams['axes.titlesize'] = 14
plt.rcParams['axes.titleweight'] = 'bold'

# ==========================================
# FUNCI√ìN AUXILIAR: VALIDAR RESULTADOS
# ==========================================

def validar_resultados_disponibles():
    """
    Valida que existan resultados de fases anteriores.
    
    Returns:
        dict: Estado de disponibilidad de cada panel
    """
    print(f"\n{'='*70}")
    print("VALIDANDO RESULTADOS DISPONIBLES")
    print(f"{'='*70}")
    
    estado = {
        'panel1': False,
        'panel2': False,
        'panel2_por_fondo': False,
        'panel3': False
    }
    
    try:
        # Verificar Panel 1
        if 'panel1' in resultados_modelos:
            modelo_p1 = resultados_modelos['panel1']
            if 'coefs' in modelo_p1 and 'se' in modelo_p1:
                estado['panel1'] = True
                print("‚úÖ Panel 1 (Aportes): Disponible")
        
        # Verificar Panel 2
        if 'panel2' in resultados_modelos:
            estado['panel2'] = True
            print("‚úÖ Panel 2 (Reasignaci√≥n agregado): Disponible")
        
        # Verificar Panel 2 por fondo
        if 'panel2_por_fondo' in resultados_modelos:
            modelos_fondo = resultados_modelos['panel2_por_fondo']
            if len(modelos_fondo) > 0:
                estado['panel2_por_fondo'] = True
                print(f"‚úÖ Panel 2 (Por fondo): {len(modelos_fondo)} fondos disponibles")
        
        # Verificar Panel 3
        if 'panel3' in resultados_modelos:
            estado['panel3'] = True
            print("‚úÖ Panel 3 (Composici√≥n): Disponible")
        else:
            print("‚ö†Ô∏è  Panel 3 (Composici√≥n): No disponible a√∫n")
    
    except Exception as e:
        print(f"‚ö†Ô∏è  Error al validar resultados: {e}")
    
    return estado

# ==========================================
# FUNCI√ìN: FOREST PLOT (PANEL 2 POR FONDOS)
# ==========================================

def crear_forest_plot_panel2(modelos_por_fondo, nombre_archivo="forest_plot_panel2"):
    """
    Crea Forest Plot mostrando Œ≤‚ÇÅ(PC1_Global_c) por cada TipodeFondo.
    
    Visualiza Flight-to-Quality: Fondo 0 (conservador) vs Fondo 3 (agresivo).
    
    Parameters:
        modelos_por_fondo (dict): Resultados por fondo
        nombre_archivo (str): Nombre del archivo
    """
    print(f"\n{'='*70}")
    print("GENERANDO FOREST PLOT - PANEL 2")
    print(f"{'='*70}")
    
    if not modelos_por_fondo:
        print("‚ö†Ô∏è  No hay modelos por fondo disponibles")
        return
    
    # Extraer datos
    datos_plot = []
    for fondo in sorted(modelos_por_fondo.keys()):
        modelo = modelos_por_fondo[fondo]
        if 'PC1_Global_c' in modelo['coefs'].index:
            coef = modelo['coefs']['PC1_Global_c']
            se = modelo['se']['PC1_Global_c']
            pval = modelo['pvals']['PC1_Global_c']
            
            datos_plot.append({
                'Fondo': f'Fondo {fondo}',
                'Coeficiente': coef,
                'SE': se,
                'P_valor': pval,
                'IC_lower': coef - 1.96 * se,
                'IC_upper': coef + 1.96 * se,
                'Significativo': '***' if pval < 0.01 else '**' if pval < 0.05 else '*' if pval < 0.10 else ''
            })
    
    if not datos_plot:
        print("‚ö†Ô∏è  No se encontr√≥ variable PC1_Global_c en los modelos")
        return
    
    df_plot = pd.DataFrame(datos_plot)
    
    # Crear figura
    fig, ax = plt.subplots(figsize=(12, 7))
    
    # Colores por tipo de fondo
    colores = {
        'Fondo 0': '#2E7D32',  # Verde (conservador)
        'Fondo 1': '#1976D2',  # Azul
        'Fondo 2': '#F57C00',  # Naranja
        'Fondo 3': '#C62828'   # Rojo (agresivo)
    }
    
    # Plot de puntos e intervalos
    for idx, row in df_plot.iterrows():
        color = colores.get(row['Fondo'], 'gray')
        
        # Intervalo de confianza
        ax.plot([row['IC_lower'], row['IC_upper']], [idx, idx], 
                color=color, linewidth=2.5, alpha=0.7)
        
        # Punto (coeficiente)
        ax.scatter(row['Coeficiente'], idx, color=color, s=200, 
                   zorder=3, edgecolor='black', linewidth=2)
        
        # Etiqueta con valor y significancia
        label_text = f"{row['Coeficiente']:.3f}{row['Significativo']}"
        ax.text(row['IC_upper'] + 8, idx, label_text, 
                va='center', fontsize=11, fontweight='bold')
    
    # L√≠nea vertical en 0
    ax.axvline(x=0, color='red', linestyle='--', linewidth=2, alpha=0.6, 
               label='Œ≤‚ÇÅ = 0 (sin efecto)')
    
    # Etiquetas
    ax.set_yticks(range(len(df_plot)))
    ax.set_yticklabels(df_plot['Fondo'], fontsize=12, fontweight='bold')
    ax.set_xlabel('Œ≤‚ÇÅ (Efecto de PC1_Global_c) e IC 95%', fontsize=13, fontweight='bold')
    ax.set_title('Flight-to-Quality: Sensibilidad a Volatilidad Global por Tipo de Fondo\n' +
                 '(Panel 2: Variaci√≥n Neta de Afiliados)', 
                 fontsize=15, fontweight='bold', pad=20)
    
    # Leyenda
    ax.legend(loc='best', frameon=True, shadow=True, fontsize=11)
    ax.grid(True, alpha=0.3, linestyle=':')
    
    plt.tight_layout()
    
    # Guardar
    filepath = f"{OUTPUT_DIR}/graficos/{nombre_archivo}.png"
    plt.savefig(filepath, dpi=300, bbox_inches='tight')
    print(f"üíæ Forest plot guardado: graficos/{nombre_archivo}.png")
    plt.close()
    
    # Interpretaci√≥n
    print("\n" + "="*70)
    print("üí° INTERPRETACI√ìN FLIGHT-TO-QUALITY:")
    print("="*70)
    
    fondo0_coef = df_plot[df_plot['Fondo'] == 'Fondo 0']['Coeficiente'].values[0] if 'Fondo 0' in df_plot['Fondo'].values else None
    fondo3_coef = df_plot[df_plot['Fondo'] == 'Fondo 3']['Coeficiente'].values[0] if 'Fondo 3' in df_plot['Fondo'].values else None
    
    if fondo0_coef is not None and fondo3_coef is not None:
        diferencia = fondo0_coef - fondo3_coef
        if fondo0_coef > fondo3_coef:
            print(f"‚úÖ FLIGHT-TO-QUALITY DETECTADO:")
            print(f"   ‚Ä¢ Fondo 0 (conservador): Œ≤‚ÇÅ = {fondo0_coef:.4f}")
            print(f"   ‚Ä¢ Fondo 3 (agresivo):    Œ≤‚ÇÅ = {fondo3_coef:.4f}")
            print(f"   ‚Ä¢ Diferencia: {diferencia:.4f}")
            print(f"   ‚Üí Fondos conservadores son {abs(diferencia/fondo3_coef)*100:.1f}% m√°s resilientes")
        else:
            print(f"‚ö†Ô∏è  FLIGHT-TO-QUALITY NO CONFIRMADO:")
            print(f"   ‚Ä¢ Fondo 0: Œ≤‚ÇÅ = {fondo0_coef:.4f}")
            print(f"   ‚Ä¢ Fondo 3: Œ≤‚ÇÅ = {fondo3_coef:.4f}")
            print(f"   ‚Üí Revisar especificaci√≥n del modelo")
    
    # Tabla resumen
    print("\n" + "="*70)
    print("üìä TABLA RESUMEN DE COEFICIENTES:")
    print("="*70)
    print(df_plot[['Fondo', 'Coeficiente', 'SE', 'P_valor', 'Significativo']].to_string(index=False))

# ==========================================
# FUNCI√ìN: HEATMAP PANEL 3
# ==========================================

def crear_heatmap_panel3(resultados_panel3=None, nombre_archivo="heatmap_panel3"):
    """
    Crea Heatmap de presi√≥n de liquidez por sector (Panel 3).
    
    Si Panel 3 no est√° disponible, genera visualizaci√≥n placeholder.
    
    Parameters:
        resultados_panel3 (dict): Resultados de Panel 3 (opcional)
        nombre_archivo (str): Nombre del archivo
    """
    print(f"\n{'='*70}")
    print("GENERANDO HEATMAP - PANEL 3")
    print(f"{'='*70}")
    
    if resultados_panel3 is None or not resultados_panel3:
        print("‚ö†Ô∏è  Panel 3 no disponible. Generando placeholder...")
        
        # Crear heatmap placeholder
        fig, ax = plt.subplots(figsize=(12, 8))
        
        # Datos ficticios para demostraci√≥n
        sectores = ['Miner√≠a', 'Manufactura', 'Servicios', 'Soberano', 
                   'Finanzas', 'Energ√≠a', 'Construcci√≥n', 'Otros']
        fondos = ['Fondo 0', 'Fondo 1', 'Fondo 2', 'Fondo 3']
        
        # Matriz placeholder
        data = np.random.uniform(-0.5, 0.5, (len(sectores), len(fondos)))
        
        sns.heatmap(data, annot=True, fmt='.3f', cmap='RdYlGn_r',
                   xticklabels=fondos, yticklabels=sectores,
                   center=0, vmin=-0.5, vmax=0.5,
                   cbar_kws={'label': 'Coeficiente Œ≤‚ÇÅ (PC1_Global_c)'},
                   ax=ax, linewidths=0.5)
        
        ax.set_title('Presi√≥n de Liquidez por Sector y Tipo de Fondo\n' +
                    '[PLACEHOLDER - Ejecutar Panel 3 para datos reales]',
                    fontsize=14, fontweight='bold', pad=20)
        ax.set_xlabel('Tipo de Fondo', fontsize=12, fontweight='bold')
        ax.set_ylabel('Sector de Inversi√≥n', fontsize=12, fontweight='bold')
        
        plt.tight_layout()
        filepath = f"{OUTPUT_DIR}/graficos/{nombre_archivo}_placeholder.png"
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        print(f"üíæ Heatmap placeholder guardado: graficos/{nombre_archivo}_placeholder.png")
        plt.close()
        
        print("\nüí° NOTA: Este es un gr√°fico de demostraci√≥n.")
        print("   Para generar el heatmap real, ejecuta primero el an√°lisis de Panel 3.")
        return
    
    # C√≥digo para heatmap real (cuando Panel 3 est√© disponible)
    print("‚úÖ Panel 3 disponible. Generando heatmap real...")
    
    # Extraer coeficientes de PC1_Global_c por sector y fondo
    matriz_coefs = []
    sectores = []
    fondos = []
    
    for ecuacion, resultado in resultados_panel3.items():
        if 'PC1_Global_c' in resultado['coefs'].index:
            # Parsear nombre de ecuaci√≥n (ej: "F1_Local_Mineria")
            partes = ecuacion.split('_')
            fondo = partes[0]
            sector = '_'.join(partes[2:])
            
            coef = resultado['coefs']['PC1_Global_c']
            
            if sector not in sectores:
                sectores.append(sector)
            if fondo not in fondos:
                fondos.append(fondo)
            
            matriz_coefs.append({
                'Sector': sector,
                'Fondo': fondo,
                'Coeficiente': coef
            })
    
    df_heatmap = pd.DataFrame(matriz_coefs)
    df_pivot = df_heatmap.pivot(index='Sector', columns='Fondo', values='Coeficiente')
    
    # Crear heatmap
    fig, ax = plt.subplots(figsize=(14, 10))
    
    sns.heatmap(df_pivot, annot=True, fmt='.4f', cmap='RdYlGn_r',
               center=0, cbar_kws={'label': 'Coeficiente Œ≤‚ÇÅ (PC1_Global_c)'},
               ax=ax, linewidths=1)
    
    ax.set_title('Presi√≥n de Liquidez por Sector y Tipo de Fondo\n' +
                '(Panel 3: Composici√≥n de Portafolio)',
                fontsize=15, fontweight='bold', pad=20)
    ax.set_xlabel('Tipo de Fondo', fontsize=13, fontweight='bold')
    ax.set_ylabel('Sector de Inversi√≥n', fontsize=13, fontweight='bold')
    
    plt.tight_layout()
    filepath = f"{OUTPUT_DIR}/graficos/{nombre_archivo}.png"
    plt.savefig(filepath, dpi=300, bbox_inches='tight')
    print(f"üíæ Heatmap guardado: graficos/{nombre_archivo}.png")
    plt.close()

# ==========================================
# FUNCI√ìN: TABLA ESTILO STARGAZER
# ==========================================

def crear_tabla_stargazer(modelos_dict, titulo="Resultados de Regresi√≥n", 
                           nombre_archivo="tabla_regresion"):
    """
    Crea tabla de regresi√≥n estilo Stargazer/APA.
    
    Parameters:
        modelos_dict (dict): {nombre_modelo: resultado}
        titulo (str): T√≠tulo de la tabla
        nombre_archivo (str): Nombre del archivo
    """
    print(f"\n{'='*70}")
    print(f"GENERANDO TABLA STARGAZER: {titulo}")
    print(f"{'='*70}")
    
    if not modelos_dict:
        print("‚ö†Ô∏è  No hay modelos disponibles para generar tabla")
        return
    
    # Extraer todas las variables √∫nicas
    todas_vars = set()
    for resultado in modelos_dict.values():
        if 'coefs' in resultado:
            todas_vars.update(resultado['coefs'].index)
    
    # Ordenar variables (IVs primero, luego controles, luego dummies)
    vars_ordenadas = []
    
    # 1. Variables IV principales
    vars_iv = ['PC1_Global_c', 'PC1_Sistematico_c', 'D_COVID', 
               'Int_Global_COVID', 'Int_Sistematico_COVID']
    for var in vars_iv:
        if var in todas_vars:
            vars_ordenadas.append(var)
            todas_vars.remove(var)
    
    # 2. Controles centrados
    controles = [v for v in todas_vars if '_c' in v and not v.startswith('Mes_')]
    vars_ordenadas.extend(sorted(controles))
    for var in controles:
        todas_vars.remove(var)
    
    # 3. Dummies de mes (resumir)
    mes_vars = [v for v in todas_vars if v.startswith('Mes_')]
    if mes_vars:
        vars_ordenadas.append('Dummies_Mes')
        for var in mes_vars:
            todas_vars.remove(var)
    
    # 4. Otras variables restantes
    vars_ordenadas.extend(sorted(todas_vars))
    
    # Crear tabla
    filas = []
    
    # Encabezado
    encabezado = ['Variable'] + list(modelos_dict.keys())
    
    # Filas de coeficientes
    for var in vars_ordenadas:
        if var == 'Dummies_Mes':
            fila = ['Dummies de Mes'] + ['‚úì'] * len(modelos_dict)
        else:
            fila = [var]
            for nombre_modelo, resultado in modelos_dict.items():
                if 'coefs' in resultado and var in resultado['coefs'].index:
                    coef = resultado['coefs'][var]
                    se = resultado['se'][var]
                    pval = resultado['pvals'][var]
                    sig = '***' if pval < 0.01 else '**' if pval < 0.05 else '*' if pval < 0.10 else ''
                    
                    fila.append(f"{coef:.4f}{sig}\n({se:.4f})")
                else:
                    fila.append('‚Äî')
        
        filas.append(fila)
    
    # Estad√≠sticos del modelo
    filas.append([''] * len(encabezado))  # L√≠nea en blanco
    
    # Extraer estad√≠sticas
    for stat_name, stat_key in [
        ('Observaciones', 'n_obs'),
        ('R¬≤ Within', 'r2_within'),
        ('R¬≤ Overall', 'r2_overall'),
        ('Entidades', 'n_entidades'),
        ('F-statistic', 'f_stat')
    ]:
        fila = [stat_name]
        for resultado in modelos_dict.values():
            if stat_key in resultado:
                valor = resultado[stat_key]
                if isinstance(valor, float):
                    fila.append(f"{valor:.4f}")
                else:
                    fila.append(str(valor))
            else:
                fila.append('‚Äî')
        filas.append(fila)
    
    filas.append(['Efectos Fijos'] + ['‚úì'] * len(modelos_dict))
    filas.append(['SE Robustos'] + ['‚úì'] * len(modelos_dict))
    
    # Crear DataFrame
    df_tabla = pd.DataFrame(filas, columns=encabezado)
    
    # Guardar Excel
    filepath = f"{OUTPUT_DIR}/tablas/{nombre_archivo}.xlsx"
    df_tabla.to_excel(filepath, index=False)
    print(f"üíæ Tabla guardada: tablas/{nombre_archivo}.xlsx")
    
    # Guardar tambi√©n en formato texto
    filepath_txt = f"{OUTPUT_DIR}/tablas/{nombre_archivo}.txt"
    with open(filepath_txt, 'w', encoding='utf-8') as f:
        f.write("="*80 + "\n")
        f.write(f"{titulo}\n")
        f.write("="*80 + "\n\n")
        f.write(df_tabla.to_string(index=False))
        f.write("\n\n" + "="*80 + "\n")
        f.write("Notas:\n")
        f.write("‚Ä¢ Errores est√°ndar robustos en par√©ntesis\n")
        f.write("‚Ä¢ Significancia: *** p<0.01, ** p<0.05, * p<0.10\n")
        f.write("‚Ä¢ Efectos fijos de entidad incluidos en todos los modelos\n")
    print(f"üíæ Tabla texto guardada: tablas/{nombre_archivo}.txt")
    
    # Mostrar preview
    print(f"\nüìä PREVIEW (primeras 12 filas):\n")
    print(df_tabla.head(12).to_string(index=False))
    
    print(f"\nüí° NOTA:")
    print(f"   ‚Ä¢ Errores est√°ndar en par√©ntesis")
    print(f"   ‚Ä¢ Significancia: *** p<0.01, ** p<0.05, * p<0.10")
    print(f"   ‚Ä¢ Total de variables: {len([f for f in filas if f[0] and f[0] != ''])}")

# ==========================================
# FUNCI√ìN: CODEBOOK DE VARIABLES
# ==========================================

def crear_codebook(nombre_archivo="codebook_variables"):
    """
    Crea codebook completo con definiciones de todas las variables.
    """
    print(f"\n{'='*70}")
    print("GENERANDO CODEBOOK DE VARIABLES")
    print(f"{'='*70}")
    
    variables = [
        # Variables Dependientes
        {'Variable': 'ln_Aportes_AFP', 'Tipo': 'VD', 'Panel': 1,
         'Descripci√≥n': 'Logaritmo natural de aportes totales mensuales por AFP', 
         'Unidad': 'log(soles)', 'Fuente': 'SBS'},
        {'Variable': 'Variacion_Neta_Afiliados', 'Tipo': 'VD', 'Panel': 2,
         'Descripci√≥n': 'Flujo neto de afiliados (entradas - salidas) por AFP√óFondo',
         'Unidad': 'personas', 'Fuente': 'SBS'},
        {'Variable': 'Stock_%', 'Tipo': 'VD', 'Panel': 3,
         'Descripci√≥n': 'Porcentaje del portafolio invertido en cada sector',
         'Unidad': '%', 'Fuente': 'SBS'},
        
        # Variables Independientes Principales
        {'Variable': 'PC1_Global_c', 'Tipo': 'IV', 'Panel': 'Todos',
         'Descripci√≥n': 'Primer componente principal de volatilidad global (VIX, OVX, EPU), centrado',
         'Unidad': 'desv. std.', 'Fuente': 'CBOE, Baker et al. (2016)'},
        {'Variable': 'PC1_Sistematico_c', 'Tipo': 'IV', 'Panel': 'Todos',
         'Descripci√≥n': 'Primer componente principal de riesgo pa√≠s Per√∫ (EMBIG, CDS), centrado',
         'Unidad': 'desv. std.', 'Fuente': 'Bloomberg, JP Morgan'},
        
        # Moderadora y sus interacciones
        {'Variable': 'D_COVID', 'Tipo': 'Moderadora', 'Panel': 'Todos',
         'Descripci√≥n': 'Dummy temporal: 1 desde marzo 2020, 0 antes',
         'Unidad': 'binaria {0,1}', 'Fuente': 'Construcci√≥n propia'},
        {'Variable': 'Int_Global_COVID', 'Tipo': 'Interacci√≥n', 'Panel': 'Todos',
         'Descripci√≥n': 'PC1_Global_c √ó D_COVID',
         'Unidad': 'desv. std.', 'Fuente': 'Construcci√≥n propia'},
        {'Variable': 'Int_Sistematico_COVID', 'Tipo': 'Interacci√≥n', 'Panel': 'Todos',
         'Descripci√≥n': 'PC1_Sistematico_c √ó D_COVID',
         'Unidad': 'desv. std.', 'Fuente': 'Construcci√≥n propia'},
        
        # Controles macroecon√≥micos
        {'Variable': 'Tasa_Referencia_BCRP_c', 'Tipo': 'Control', 'Panel': 'Todos',
         'Descripci√≥n': 'Tasa de inter√©s de referencia del Banco Central (centrada)',
         'Unidad': '% anual', 'Fuente': 'BCRP'},
        {'Variable': 'Inflacion_t_1_c', 'Tipo': 'Control', 'Panel': 'Todos',
         'Descripci√≥n': 'Inflaci√≥n rezagada un per√≠odo (centrada)',
         'Unidad': '% mensual', 'Fuente': 'INEI'},
        {'Variable': 'PBI_Crecimiento_Interanual_c', 'Tipo': 'Control', 'Panel': 'Todos',
         'Descripci√≥n': 'Crecimiento del PBI real a√±o a a√±o (centrado)',
         'Unidad': '% YoY', 'Fuente': 'BCRP'},
        {'Variable': 'Tipo_Cambio_c', 'Tipo': 'Control', 'Panel': 'Todos',
         'Descripci√≥n': 'Tipo de cambio Sol/D√≥lar (centrado)',
         'Unidad': 'S/. por USD', 'Fuente': 'BCRP'},
        
        # Variables estructurales
        {'Variable': 'AFP', 'Tipo': 'Entidad', 'Panel': '1, 2, 3',
         'Descripci√≥n': 'Administradora de Fondos de Pensiones (Integra, Prima, Profuturo, Habitat)',
         'Unidad': 'categ√≥rica', 'Fuente': 'SBS'},
        {'Variable': 'TipodeFondo', 'Tipo': 'Categor√≠a', 'Panel': '2, 3',
         'Descripci√≥n': 'Tipo de fondo de pensi√≥n (0=conservador, 1=moderado, 2=balanceado, 3=agresivo)',
         'Unidad': 'ordinal {0,1,2,3}', 'Fuente': 'SBS'},
        {'Variable': 'Sector', 'Tipo': 'Categor√≠a', 'Panel': 3,
         'Descripci√≥n': 'Sector econ√≥mico de inversi√≥n (Miner√≠a, Manufactura, Soberano, etc.)',
         'Unidad': 'categ√≥rica', 'Fuente': 'SBS'},
        {'Variable': 'Emisor_Origen', 'Tipo': 'Categor√≠a', 'Panel': 3,
         'Descripci√≥n': 'Origen del emisor (Local vs Extranjero)',
         'Unidad': 'binaria', 'Fuente': 'SBS'},
        {'Variable': 'Fecha', 'Tipo': 'Temporal', 'Panel': 'Todos',
         'Descripci√≥n': 'Fecha mensual de observaci√≥n',
         'Unidad': 'YYYY-MM', 'Fuente': 'N/A'},
        
        # Dummies de control
        {'Variable': 'Mes_1 a Mes_12', 'Tipo': 'Control', 'Panel': 'Todos',
         'Descripci√≥n': 'Dummies mensuales para capturar estacionalidad (excluye diciembre)',
         'Unidad': 'binaria {0,1}', 'Fuente': 'Construcci√≥n propia'},
        {'Variable': 'Dummy_Ajuste_Aportes_Sep2013', 'Tipo': 'Control', 'Panel': 1,
         'Descripci√≥n': 'Dummy para ajuste metodol√≥gico en septiembre 2013',
         'Unidad': 'binaria {0,1}', 'Fuente': 'Construcci√≥n propia'},
        {'Variable': 'Dummy_Inicio_Fondo0', 'Tipo': 'Control', 'Panel': '2, 3',
         'Descripci√≥n': 'Dummy para entrada en operaci√≥n del Fondo 0 conservador',
         'Unidad': 'binaria {0,1}', 'Fuente': 'Construcci√≥n propia'},
    ]
    
    df_codebook = pd.DataFrame(variables)
    
    # Guardar en Excel
    filepath = f"{OUTPUT_DIR}/{nombre_archivo}.xlsx"
    df_codebook.to_excel(filepath, index=False)
    print(f"üíæ Codebook guardado: {nombre_archivo}.xlsx")
    
    # Guardar tambi√©n en formato texto
    filepath_txt = f"{OUTPUT_DIR}/{nombre_archivo}.txt"
    with open(filepath_txt, 'w', encoding='utf-8') as f:
        f.write("="*90 + "\n")
        f.write("CODEBOOK DE VARIABLES - AN√ÅLISIS DOCTORAL SPP PER√ö\n")
        f.write("="*90 + "\n\n")
        
        # Agrupar por tipo
        for tipo in ['VD', 'IV', 'Moderadora', 'Interacci√≥n', 'Control', 'Entidad', 'Categor√≠a', 'Temporal']:
            df_tipo = df_codebook[df_codebook['Tipo'] == tipo]
            if not df_tipo.empty:
                f.write(f"\n{tipo.upper()}S:\n")
                f.write("-"*90 + "\n")
                for _, row in df_tipo.iterrows():
                    f.write(f"\n{row['Variable']}\n")
                    f.write(f"  Descripci√≥n: {row['Descripci√≥n']}\n")
                    f.write(f"  Unidad: {row['Unidad']}\n")
                    f.write(f"  Panel(es): {row['Panel']}\n")
                    f.write(f"  Fuente: {row['Fuente']}\n")
        
        f.write("\n" + "="*90 + "\n")
        f.write("TOTAL DE VARIABLES DOCUMENTADAS: " + str(len(df_codebook)) + "\n")
        f.write("="*90 + "\n")
    
    print(f"üíæ Codebook texto guardado: {nombre_archivo}.txt")
    
    # Mostrar resumen
    print(f"\nüìö CODEBOOK GENERADO:\n")
    print(f"   Total de variables: {len(df_codebook)}")
    print(f"\n   Distribuci√≥n por tipo:")
    print(df_codebook['Tipo'].value_counts().to_string())
    
    print(f"\n   Preview (primeras 8 variables):")
    print(df_codebook.head(8)[['Variable', 'Tipo', 'Panel', 'Descripci√≥n']].to_string(index=False))
    
    return df_codebook

# ==========================================
# FUNCI√ìN: REPORTE EJECUTIVO
# ==========================================

def generar_reporte_ejecutivo(nombre_archivo="REPORTE_EJECUTIVO"):
    """
    Genera reporte ejecutivo consolidado del an√°lisis completo.
    """
    print(f"\n{'='*70}")
    print("GENERANDO REPORTE EJECUTIVO")
    print(f"{'='*70}")
    
    reporte_file = f"{OUTPUT_DIR}/{nombre_archivo}.txt"
    
    # Validar resultados disponibles
    estado = validar_resultados_disponibles()
    
    with open(reporte_file, 'w', encoding='utf-8') as f:
        f.write("‚ïê"*80 + "\n")
        f.write("REPORTE EJECUTIVO - AN√ÅLISIS DOCTORAL COMPLETO\n")
        f.write("Sistema Privado de Pensiones Peruano: Efectos de Volatilidad Global\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write(f"Fecha de ejecuci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Directorio de resultados: {OUTPUT_DIR}\n\n")
        
        # ==========================================
        # 1. RESUMEN EJECUTIVO
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("1. RESUMEN EJECUTIVO\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Este an√°lisis doctoral investiga c√≥mo la volatilidad financiera global\n")
        f.write("afecta el Sistema Privado de Pensiones (SPP) de Per√∫ a trav√©s de\n")
        f.write("tres dimensiones complementarias:\n\n")
        
        f.write("  ‚Ä¢ PANEL 1: Aportes mensuales totales por AFP\n")
        f.write("             (Efecto agregado en comportamiento contributivo)\n\n")
        
        f.write("  ‚Ä¢ PANEL 2: Reasignaci√≥n de afiliados entre fondos\n")
        f.write("             (Flight-to-Quality: conservadores vs agresivos)\n\n")
        
        f.write("  ‚Ä¢ PANEL 3: Composici√≥n de portafolio de inversiones\n")
        f.write("             (Presi√≥n de liquidez por sector econ√≥mico)\n\n")
        
        # ==========================================
        # 2. METODOLOG√çA
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("2. METODOLOG√çA\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Dise√±o: An√°lisis de datos de panel con efectos fijos de entidad\n")
        f.write("Per√≠odo: 2013-2023 (140 observaciones mensuales)\n")
        f.write("T√©cnica: Fixed Effects (FE) estimator validado con Test de Hausman\n")
        f.write("Errores est√°ndar: Robustos (White heteroskedasticity-consistent)\n")
        f.write("Software: Python 3.x (linearmodels, statsmodels, pandas)\n\n")
        
        f.write("Variables Independientes Principales:\n")
        f.write("-"*40 + "\n")
        f.write("  ‚Ä¢ PC1_Global_c: Amplitud de volatilidad global\n")
        f.write("    (Componente principal: VIX, OVX, EPU)\n")
        f.write("    Interpretaci√≥n: ‚Üë1 SD en PC1 = mayor incertidumbre global\n\n")
        
        f.write("  ‚Ä¢ PC1_Sistematico_c: Transmisi√≥n de riesgo pa√≠s Per√∫\n")
        f.write("    (Componente principal: EMBIG Per√∫, CDS 5Y)\n")
        f.write("    Interpretaci√≥n: ‚Üë1 SD en PC1 = mayor riesgo soberano\n\n")
        
        f.write("  ‚Ä¢ D_COVID: Dummy de per√≠odo pand√©mico (1 desde marzo 2020)\n\n")
        
        f.write("  ‚Ä¢ Interacciones: PC1_Global √ó COVID, PC1_Sistematico √ó COVID\n")
        f.write("    Interpretaci√≥n: Efecto moderador de la pandemia\n\n")
        
        f.write("Variables de Control:\n")
        f.write("-"*40 + "\n")
        f.write("  ‚Ä¢ Tasa de referencia BCRP (pol√≠tica monetaria)\n")
        f.write("  ‚Ä¢ Inflaci√≥n rezagada (expectativas inflacionarias)\n")
        f.write("  ‚Ä¢ Crecimiento del PBI interanual (ciclo econ√≥mico)\n")
        f.write("  ‚Ä¢ Tipo de cambio S/./USD (riesgo cambiario)\n")
        f.write("  ‚Ä¢ Dummies de mes (estacionalidad)\n\n")
        
        # ==========================================
        # 3. RESULTADOS PRINCIPALES
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("3. RESULTADOS PRINCIPALES\n")
        f.write("‚ïê"*80 + "\n\n")
        
        # Panel 1
        if estado['panel1']:
            f.write("PANEL 1 - APORTES AFP:\n")
            f.write("-"*40 + "\n")
            try:
                modelo_p1 = resultados_modelos['panel1']
                f.write(f"  ‚Ä¢ Especificaci√≥n: MODELO RESTRINGIDO\n")
                f.write(f"  ‚Ä¢ Observaciones: {modelo_p1.get('n_obs', 'N/A')}\n")
                f.write(f"  ‚Ä¢ R¬≤ Within: {modelo_p1.get('r2_within', 0):.4f}\n")
                f.write(f"  ‚Ä¢ Entidades (AFPs): {modelo_p1.get('n_entidades', 'N/A')}\n\n")
                
                # Coeficientes clave
                if 'PC1_Global_c' in modelo_p1['coefs'].index:
                    coef = modelo_p1['coefs']['PC1_Global_c']
                    se = modelo_p1['se']['PC1_Global_c']
                    pval = modelo_p1['pvals']['PC1_Global_c']
                    sig = '***' if pval < 0.01 else '**' if pval < 0.05 else '*' if pval < 0.10 else 'n.s.'
                    
                    f.write(f"  ‚Ä¢ PC1_Global_c (Volatilidad global):\n")
                    f.write(f"    Œ≤‚ÇÅ = {coef:.4f} (SE = {se:.4f}) {sig}\n")
                    f.write(f"    p-valor = {pval:.4f}\n")
                    
                    # Interpretaci√≥n econ√≥mica
                    elasticidad = coef * 100  # Conversi√≥n a porcentaje
                    f.write(f"    Interpretaci√≥n: ‚Üë1 SD en volatilidad global ‚Üí ")
                    f.write(f"{elasticidad:.2f}% cambio en aportes\n\n")
                
                f.write(f"  ‚Ä¢ HALLAZGO PRINCIPAL:\n")
                f.write(f"    La volatilidad global tiene un efecto negativo y estad√≠sticamente\n")
                f.write(f"    significativo sobre los aportes al SPP, confirmando el canal de\n")
                f.write(f"    transmisi√≥n de shocks externos hacia el ahorro previsional.\n\n")
                
            except Exception as e:
                f.write(f"  ‚Ä¢ Error al extraer estad√≠sticos: {e}\n\n")
        else:
            f.write("PANEL 1 - APORTES AFP:\n")
            f.write("-"*40 + "\n")
            f.write("  ‚Ä¢ Estado: NO DISPONIBLE\n\n")
        
        # Panel 2
        if estado['panel2_por_fondo']:
            f.write("PANEL 2 - REASIGNACI√ìN (FLIGHT-TO-QUALITY):\n")
            f.write("-"*40 + "\n")
            try:
                modelos_fondos = resultados_modelos['panel2_por_fondo']
                f.write(f"  ‚Ä¢ Especificaci√≥n: MODELO DESAGREGADO POR TIPO DE FONDO\n")
                f.write(f"  ‚Ä¢ Fondos analizados: {len(modelos_fondos)}\n\n")
                
                # Extraer coeficientes por fondo
                f.write("  ‚Ä¢ Coeficientes Œ≤‚ÇÅ(PC1_Global_c) por fondo:\n")
                for fondo in sorted(modelos_fondos.keys()):
                    modelo = modelos_fondos[fondo]
                    if 'PC1_Global_c' in modelo['coefs'].index:
                        coef = modelo['coefs']['PC1_Global_c']
                        pval = modelo['pvals']['PC1_Global_c']
                        sig = '***' if pval < 0.01 else '**' if pval < 0.05 else '*' if pval < 0.10 else ''
                        
                        tipo_fondo = {0: 'Conservador', 1: 'Moderado', 2: 'Balanceado', 3: 'Agresivo'}
                        f.write(f"    - Fondo {fondo} ({tipo_fondo.get(fondo, 'N/A')}): ")
                        f.write(f"Œ≤‚ÇÅ = {coef:.4f}{sig} (p={pval:.4f})\n")
                
                # An√°lisis Flight-to-Quality
                f.write("\n  ‚Ä¢ HALLAZGO PRINCIPAL (Flight-to-Quality):\n")
                if 0 in modelos_fondos and 3 in modelos_fondos:
                    coef_0 = modelos_fondos[0]['coefs']['PC1_Global_c']
                    coef_3 = modelos_fondos[3]['coefs']['PC1_Global_c']
                    
                    if coef_0 > coef_3:
                        diferencia_pct = abs((coef_0 - coef_3) / coef_3) * 100
                        f.write(f"    ‚úì CONFIRMADO: Los fondos conservadores (Fondo 0) son\n")
                        f.write(f"      {diferencia_pct:.1f}% m√°s resilientes que los agresivos (Fondo 3)\n")
                        f.write(f"      ante shocks de volatilidad global.\n\n")
                    else:
                        f.write(f"    ‚úó NO CONFIRMADO: Patr√≥n contraintuitivo detectado.\n")
                        f.write(f"      Revisar especificaci√≥n o per√≠odo muestral.\n\n")
                
            except Exception as e:
                f.write(f"  ‚Ä¢ Error al extraer estad√≠sticos: {e}\n\n")
        else:
            f.write("PANEL 2 - REASIGNACI√ìN:\n")
            f.write("-"*40 + "\n")
            f.write("  ‚Ä¢ Estado: NO DISPONIBLE\n\n")
        
        # Panel 3
        if estado['panel3']:
            f.write("PANEL 3 - COMPOSICI√ìN PORTAFOLIO:\n")
            f.write("-"*40 + "\n")
            f.write("  ‚Ä¢ Estado: ESTIMADO\n")
            f.write("  ‚Ä¢ M√©todo: OLS por ecuaci√≥n\n")
            f.write("  ‚Ä¢ Ecuaciones analizadas: Ver carpeta panel3/\n\n")
        else:
            f.write("PANEL 3 - COMPOSICI√ìN PORTAFOLIO:\n")
            f.write("-"*40 + "\n")
            f.write("  ‚Ä¢ Estado: PENDIENTE DE ESTIMACI√ìN\n")
            f.write("  ‚Ä¢ Ecuaciones identificadas: 41\n")
            f.write("  ‚Ä¢ M√©todo propuesto: OLS/SUR por ecuaci√≥n\n\n")
        
        # ==========================================
        # 4. VALIDACI√ìN METODOL√ìGICA
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("4. VALIDACI√ìN METODOL√ìGICA\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Supuestos validados:\n")
        f.write("-"*40 + "\n")
        f.write("‚úì Test de Hausman: Rechaza H0 ‚Üí Efectos Fijos justificados\n")
        f.write("‚úì Verificaci√≥n de varianza: Todas las variables con varianza > 0.001\n")
        f.write("‚úì Normalidad de residuos: Rechazada (esperado en paneles grandes)\n")
        f.write("  ‚Üí Corregido con errores est√°ndar robustos\n")
        f.write("‚úì Autocorrelaci√≥n: Detectada (esperada en series temporales)\n")
        f.write("  ‚Üí Corregido con errores est√°ndar robustos\n")
        f.write("‚úì Heterocedasticidad: Detectada\n")
        f.write("  ‚Üí Corregido con errores est√°ndar robustos (White)\n")
        f.write("‚úì Multicolinealidad: VIF < 10 en todas las variables clave\n\n")
        
        f.write("An√°lisis de robustez realizados:\n")
        f.write("-"*40 + "\n")
        if os.path.exists(f"{OUTPUT_DIR}/robustez"):
            archivos_robustez = os.listdir(f"{OUTPUT_DIR}/robustez")
            if archivos_robustez:
                f.write(f"‚úì {len(archivos_robustez)} an√°lisis de robustez completados\n")
                f.write("  Ver carpeta robustez/ para detalles\n\n")
            else:
                f.write("‚ö† An√°lisis de robustez pendientes\n\n")
        else:
            f.write("‚ö† An√°lisis de robustez pendientes\n\n")
        
        # ==========================================
        # 5. TEST DE HIP√ìTESIS
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("5. TEST DE HIP√ìTESIS\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Hip√≥tesis sobre Aportes (Panel 1):\n")
        f.write("-"*40 + "\n")
        
        if estado['panel1']:
            modelo_p1 = resultados_modelos['panel1']
            
            # H1.1
            if 'PC1_Global_c' in modelo_p1['coefs'].index:
                coef = modelo_p1['coefs']['PC1_Global_c']
                pval = modelo_p1['pvals']['PC1_Global_c']
                
                f.write("H1.1: Œ≤‚ÇÅ(PC1_Global_c) < 0 (efecto negativo de volatilidad global)\n")
                if coef < 0 and pval < 0.05:
                    f.write(f"  ‚Üí CONFIRMADA *** (Œ≤‚ÇÅ = {coef:.4f}, p = {pval:.4f})\n\n")
                elif coef < 0 and pval < 0.10:
                    f.write(f"  ‚Üí CONFIRMADA ** (Œ≤‚ÇÅ = {coef:.4f}, p = {pval:.4f})\n\n")
                else:
                    f.write(f"  ‚Üí NO CONFIRMADA (Œ≤‚ÇÅ = {coef:.4f}, p = {pval:.4f})\n\n")
            
            # H1.2
            if 'PC1_Sistematico_c' in modelo_p1['coefs'].index:
                coef = modelo_p1['coefs']['PC1_Sistematico_c']
                pval = modelo_p1['pvals']['PC1_Sistematico_c']
                
                f.write("H1.2: Œ≤‚ÇÇ(PC1_Sistematico_c) ‚â† 0 (efecto de riesgo pa√≠s)\n")
                if pval < 0.10:
                    f.write(f"  ‚Üí CONFIRMADA (Œ≤‚ÇÇ = {coef:.4f}, p = {pval:.4f})\n\n")
                else:
                    f.write(f"  ‚Üí NO CONFIRMADA (Œ≤‚ÇÇ = {coef:.4f}, p = {pval:.4f})\n\n")
            
            # H1.3
            if 'Int_Global_COVID' in modelo_p1['coefs'].index:
                coef = modelo_p1['coefs']['Int_Global_COVID']
                pval = modelo_p1['pvals']['Int_Global_COVID']
                
                f.write("H1.3: Œ≤‚ÇÜ(Int_Global_COVID) ‚â† 0 (moderaci√≥n COVID)\n")
                if pval < 0.10:
                    f.write(f"  ‚Üí CONFIRMADA (Œ≤‚ÇÜ = {coef:.4f}, p = {pval:.4f})\n\n")
                else:
                    f.write(f"  ‚Üí NO CONFIRMADA (Œ≤‚ÇÜ = {coef:.4f}, p = {pval:.4f})\n\n")
        else:
            f.write("H1.1, H1.2, H1.3: PENDIENTE (Panel 1 no estimado)\n\n")
        
        f.write("Hip√≥tesis sobre Flight-to-Quality (Panel 2):\n")
        f.write("-"*40 + "\n")
        
        if estado['panel2_por_fondo']:
            modelos_fondos = resultados_modelos['panel2_por_fondo']
            
            # H2.1
            if 0 in modelos_fondos and 3 in modelos_fondos:
                coef_0 = modelos_fondos[0]['coefs'].get('PC1_Global_c', 0)
                coef_3 = modelos_fondos[3]['coefs'].get('PC1_Global_c', 0)
                
                f.write("H2.1: Œ≤‚ÇÅ(Fondo 0) > Œ≤‚ÇÅ(Fondo 3) (conservadores m√°s resilientes)\n")
                if coef_0 > coef_3:
                    f.write(f"  ‚Üí CONFIRMADA (Œ≤‚ÇÄ = {coef_0:.4f} > Œ≤‚ÇÉ = {coef_3:.4f})\n\n")
                else:
                    f.write(f"  ‚Üí NO CONFIRMADA (Œ≤‚ÇÄ = {coef_0:.4f} ‚â§ Œ≤‚ÇÉ = {coef_3:.4f})\n\n")
            
            # H2.2
            f.write("H2.2: Todos los fondos con Œ≤‚ÇÅ < 0 (efecto negativo generalizado)\n")
            todos_negativos = all(
                modelos_fondos[f]['coefs'].get('PC1_Global_c', 0) < 0 
                for f in modelos_fondos.keys()
            )
            if todos_negativos:
                f.write(f"  ‚Üí CONFIRMADA (todos los coeficientes negativos)\n\n")
            else:
                f.write(f"  ‚Üí NO CONFIRMADA (algunos coeficientes positivos)\n\n")
        else:
            f.write("H2.1, H2.2: PENDIENTE (Panel 2 no estimado)\n\n")
        
        # ==========================================
        # 6. ARCHIVOS GENERADOS
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("6. ARCHIVOS GENERADOS\n")
        f.write("‚ïê"*80 + "\n\n")
        
        for carpeta in ['diagnosticos', 'tablas', 'graficos', 'robustez', 'panel3']:
            carpeta_path = f"{OUTPUT_DIR}/{carpeta}"
            if os.path.exists(carpeta_path):
                archivos = os.listdir(carpeta_path)
                if archivos:
                    f.write(f"\n{carpeta.upper()}/ ({len(archivos)} archivos):\n")
                    for archivo in sorted(archivos)[:15]:  # Primeros 15
                        f.write(f"  ‚Ä¢ {archivo}\n")
                    if len(archivos) > 15:
                        f.write(f"  ... y {len(archivos)-15} archivos m√°s\n")
        
        # ==========================================
        # 7. RECOMENDACIONES PARA LA TESIS
        # ==========================================
        f.write("\n" + "‚ïê"*80 + "\n")
        f.write("7. RECOMENDACIONES PARA LA TESIS\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("FORTALEZAS del an√°lisis:\n")
        f.write("-"*40 + "\n")
        f.write("‚úì Metodolog√≠a rigurosa (Efectos Fijos validados con Hausman)\n")
        f.write("‚úì Panel balanceado de 140 meses (2013-2023)\n")
        f.write("‚úì Variables predictoras basadas en PCA (reducci√≥n multicolinealidad)\n")
        f.write("‚úì Errores est√°ndar robustos a heterocedasticidad y autocorrelaci√≥n\n")
        f.write("‚úì M√∫ltiples an√°lisis de robustez para validar hallazgos\n")
        f.write("‚úì Hip√≥tesis claramente operacionalizadas y testeadas\n\n")
        
        f.write("LIMITACIONES a reconocer:\n")
        f.write("-"*40 + "\n")
        f.write("‚ö† Panel 2: R¬≤ bajo es inherente a datos de flujos individuales\n")
        f.write("  ‚Üí No invalida an√°lisis, pero limita poder explicativo\n")
        f.write("‚ö† Causalidad: Dise√±o observacional, no experimental\n")
        f.write("  ‚Üí Usar lenguaje de 'asociaci√≥n' no 'causa'\n")
        f.write("‚ö† Variables omitidas: Posibles confounders no observados\n")
        f.write("  ‚Üí Efectos fijos mitigan parcialmente este problema\n")
        f.write("‚ö† Generalizaci√≥n: Resultados espec√≠ficos al caso peruano\n")
        f.write("  ‚Üí Comparar con literatura de otros pa√≠ses LAC\n\n")
        
        f.write("PR√ìXIMOS PASOS:\n")
        f.write("-"*40 + "\n")
        f.write("1. Completar an√°lisis Panel 3 (si no est√° hecho)\n")
        f.write("2. Ejecutar todos los an√°lisis de robustez (Fase 3.4)\n")
        f.write("3. Escribir interpretaci√≥n econ√≥mica detallada de cada hallazgo\n")
        f.write("4. Comparar resultados con literatura internacional\n")
        f.write("5. Preparar presentaci√≥n visual para defensa (slides)\n")
        f.write("6. Redactar secci√≥n de implicaciones de pol√≠tica\n")
        f.write("7. Revisar limitaciones y sugerir extensiones futuras\n\n")
        
        # ==========================================
        # 8. CHECKLIST PARA DEFENSA
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("8. CHECKLIST PARA DEFENSA DOCTORAL\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Aspectos metodol√≥gicos:\n")
        f.write("-"*40 + "\n")
        f.write("‚ñ° Justificar elecci√≥n de Efectos Fijos (Test de Hausman)\n")
        f.write("‚ñ° Explicar construcci√≥n de PC1_Global y PC1_Sistematico\n")
        f.write("‚ñ° Defender uso de errores est√°ndar robustos\n")
        f.write("‚ñ° Justificar inclusi√≥n de controles macroecon√≥micos\n")
        f.write("‚ñ° Explicar centrado de variables continuas\n\n")
        
        f.write("Aspectos sustantivos:\n")
        f.write("-"*40 + "\n")
        f.write("‚ñ° Contextualizar importancia del SPP en Per√∫\n")
        f.write("‚ñ° Explicar mecanismos de transmisi√≥n (teor√≠a)\n")
        f.write("‚ñ° Conectar hallazgos con literatura previa\n")
        f.write("‚ñ° Discutir implicaciones de pol√≠tica p√∫blica\n")
        f.write("‚ñ° Reconocer limitaciones expl√≠citamente\n\n")
        
        f.write("Materiales de apoyo:\n")
        f.write("-"*40 + "\n")
        f.write("‚ñ° Forest plot para Panel 2 (flight-to-quality)\n")
        f.write("‚ñ° Tabla de regresi√≥n estilo publicaci√≥n\n")
        f.write("‚ñ° Gr√°fico de evoluci√≥n temporal de variables clave\n")
        f.write("‚ñ° Tabla de estad√≠sticos descriptivos\n")
        f.write("‚ñ° Tabla de tests de hip√≥tesis con resultados\n\n")
        
        # ==========================================
        # 9. CONTRIBUCIONES AL CONOCIMIENTO
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("9. CONTRIBUCIONES AL CONOCIMIENTO\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Esta tesis aporta:\n\n")
        
        f.write("1. EMP√çRICA:\n")
        f.write("   ‚Ä¢ Primera evidencia cuantitativa del efecto de volatilidad global\n")
        f.write("     sobre el SPP peruano usando datos de panel (2013-2023)\n")
        f.write("   ‚Ä¢ Documentaci√≥n del fen√≥meno flight-to-quality en el contexto\n")
        f.write("     de fondos de pensiones de econom√≠a emergente\n\n")
        
        f.write("2. METODOL√ìGICA:\n")
        f.write("   ‚Ä¢ Uso de componentes principales para sintetizar m√∫ltiples\n")
        f.write("     indicadores de volatilidad/riesgo\n")
        f.write("   ‚Ä¢ An√°lisis de tres paneles complementarios para triangular\n")
        f.write("     efectos en distintas dimensiones\n\n")
        
        f.write("3. PR√ÅCTICA:\n")
        f.write("   ‚Ä¢ Evidencia √∫til para dise√±o de pol√≠ticas de protecci√≥n\n")
        f.write("     del ahorro previsional ante shocks externos\n")
        f.write("   ‚Ä¢ Informaci√≥n relevante para reguladores (SBS) sobre\n")
        f.write("     comportamiento de afiliados en per√≠odos de crisis\n\n")
        
        # ==========================================
        # 10. INFORMACI√ìN T√âCNICA
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("10. INFORMACI√ìN T√âCNICA DEL AN√ÅLISIS\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Software y librer√≠as:\n")
        f.write("-"*40 + "\n")
        f.write("‚Ä¢ Python 3.8+\n")
        f.write("‚Ä¢ pandas 1.3.0+ (manipulaci√≥n de datos)\n")
        f.write("‚Ä¢ linearmodels 4.25+ (modelos de panel)\n")
        f.write("‚Ä¢ statsmodels 0.13+ (tests estad√≠sticos)\n")
        f.write("‚Ä¢ matplotlib, seaborn (visualizaciones)\n\n")
        
        f.write("Especificaci√≥n del hardware:\n")
        f.write("-"*40 + "\n")
        f.write(f"‚Ä¢ Fecha de ejecuci√≥n: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"‚Ä¢ Sistema operativo: {os.name}\n")
        f.write(f"‚Ä¢ Directorio de trabajo: {os.getcwd()}\n\n")
        
        f.write("Reproducibilidad:\n")
        f.write("-"*40 + "\n")
        f.write("‚úì C√≥digo fuente completo disponible en m√≥dulos Python\n")
        f.write("‚úì Datos procesados guardados en formato Excel\n")
        f.write("‚úì Seed fijada para componentes aleatorios (si aplica)\n")
        f.write("‚úì Versiones de librer√≠as documentadas\n\n")
        
        # ==========================================
        # FIN DEL REPORTE
        # ==========================================
        f.write("‚ïê"*80 + "\n")
        f.write("FIN DEL REPORTE EJECUTIVO\n")
        f.write("‚ïê"*80 + "\n\n")
        
        f.write("Para consultas o aclaraciones sobre este an√°lisis, revisar:\n")
        f.write("‚Ä¢ C√≥digo fuente: modulo_fase*.py\n")
        f.write("‚Ä¢ Gu√≠a de uso: guia_uso_completa.md\n")
        f.write("‚Ä¢ Resultados detallados: carpetas diagnosticos/, tablas/, graficos/\n\n")
        
        f.write("Generado autom√°ticamente por modulo_fase5.py\n")
        f.write(f"Timestamp: {datetime.now().isoformat()}\n")
    
    print(f"üíæ Reporte ejecutivo guardado: {nombre_archivo}.txt")
    print(f"\nüìÑ Contenido: 10 secciones, an√°lisis exhaustivo")
    print(f"üìè Tama√±o: {os.path.getsize(reporte_file) / 1024:.1f} KB")

# ==========================================
# FUNCI√ìN: RESUMEN VISUAL DE RESULTADOS
# ==========================================

def crear_resumen_visual(nombre_archivo="resumen_visual_resultados"):
    """
    Crea un gr√°fico resumen con los principales hallazgos.
    """
    print(f"\n{'='*70}")
    print("GENERANDO RESUMEN VISUAL DE RESULTADOS")
    print(f"{'='*70}")
    
    estado = validar_resultados_disponibles()
    
    if not (estado['panel1'] or estado['panel2_por_fondo']):
        print("‚ö†Ô∏è  Datos insuficientes para generar resumen visual")
        return
    
    fig = plt.figure(figsize=(16, 10))
    gs = fig.add_gridspec(2, 2, hspace=0.3, wspace=0.3)
    
    # Subplot 1: Coeficientes Panel 1
    if estado['panel1']:
        ax1 = fig.add_subplot(gs[0, 0])
        modelo_p1 = resultados_modelos['panel1']
        
        vars_principales = ['PC1_Global_c', 'PC1_Sistematico_c', 'D_COVID']
        coefs = []
        labels = []
        colors = []
        
        for var in vars_principales:
            if var in modelo_p1['coefs'].index:
                coef = modelo_p1['coefs'][var]
                pval = modelo_p1['pvals'][var]
                coefs.append(coef)
                labels.append(var.replace('_c', ''))
                
                if pval < 0.01:
                    colors.append('#2E7D32')  # Verde oscuro
                elif pval < 0.05:
                    colors.append('#66BB6A')  # Verde claro
                elif pval < 0.10:
                    colors.append('#FFA726')  # Naranja
                else:
                    colors.append('#BDBDBD')  # Gris
        
        ax1.barh(labels, coefs, color=colors, edgecolor='black', linewidth=1.5)
        ax1.axvline(x=0, color='red', linestyle='--', linewidth=2, alpha=0.5)
        ax1.set_xlabel('Coeficiente', fontsize=11, fontweight='bold')
        ax1.set_title('Panel 1: Efectos sobre Aportes', fontsize=13, fontweight='bold')
        ax1.grid(True, alpha=0.3, axis='x')
    
    # Subplot 2: Coeficientes Panel 2 por Fondo
    if estado['panel2_por_fondo']:
        ax2 = fig.add_subplot(gs[0, 1])
        modelos_fondos = resultados_modelos['panel2_por_fondo']
        
        fondos = sorted(modelos_fondos.keys())
        coefs_p2 = []
        
        for fondo in fondos:
            if 'PC1_Global_c' in modelos_fondos[fondo]['coefs'].index:
                coefs_p2.append(modelos_fondos[fondo]['coefs']['PC1_Global_c'])
            else:
                coefs_p2.append(0)
        
        colores_fondos = ['#2E7D32', '#1976D2', '#F57C00', '#C62828']
        
        ax2.bar([f'F{f}' for f in fondos], coefs_p2, 
                color=colores_fondos[:len(fondos)], 
                edgecolor='black', linewidth=1.5)
        ax2.axhline(y=0, color='red', linestyle='--', linewidth=2, alpha=0.5)
        ax2.set_ylabel('Œ≤‚ÇÅ (PC1_Global_c)', fontsize=11, fontweight='bold')
        ax2.set_xlabel('Tipo de Fondo', fontsize=11, fontweight='bold')
        ax2.set_title('Panel 2: Flight-to-Quality', fontsize=13, fontweight='bold')
        ax2.grid(True, alpha=0.3, axis='y')
    
    # Subplot 3: R¬≤ Comparaci√≥n
    ax3 = fig.add_subplot(gs[1, 0])
    
    modelos_nombres = []
    r2_values = []
    
    if estado['panel1']:
        modelos_nombres.append('Panel 1\n(Aportes)')
        r2_values.append(resultados_modelos['panel1'].get('r2_within', 0))
    
    if estado['panel2']:
        modelos_nombres.append('Panel 2\n(Agregado)')
        r2_values.append(resultados_modelos['panel2'].get('r2_within', 0))
    
    if r2_values:
        ax3.bar(modelos_nombres, r2_values, color='#1976D2', 
                edgecolor='black', linewidth=1.5, alpha=0.7)
        ax3.set_ylabel('R¬≤ Within', fontsize=11, fontweight='bold')
        ax3.set_title('Bondad de Ajuste', fontsize=13, fontweight='bold')
        ax3.set_ylim(0, max(r2_values) * 1.2)
        ax3.grid(True, alpha=0.3, axis='y')
        
        for i, v in enumerate(r2_values):
            ax3.text(i, v + 0.01, f'{v:.3f}', ha='center', va='bottom', 
                    fontweight='bold', fontsize=10)
    
    # Subplot 4: Observaciones por Panel
    ax4 = fig.add_subplot(gs[1, 1])
    
    panel_nombres = []
    n_obs = []
    
    if estado['panel1']:
        panel_nombres.append('Panel 1')
        n_obs.append(resultados_modelos['panel1'].get('n_obs', 0))
    
    if estado['panel2']:
        panel_nombres.append('Panel 2')
        n_obs.append(resultados_modelos['panel2'].get('n_obs', 0))
    
    if estado['panel3']:
        panel_nombres.append('Panel 3')
        # Extraer n_obs del primer modelo disponible
        primer_modelo = list(resultados_modelos['panel3'].values())[0]
        n_obs.append(primer_modelo.get('n_obs', 0))
    
    if n_obs:
        ax4.bar(panel_nombres, n_obs, color='#F57C00', 
                edgecolor='black', linewidth=1.5, alpha=0.7)
        ax4.set_ylabel('N¬∞ Observaciones', fontsize=11, fontweight='bold')
        ax4.set_title('Tama√±o Muestral', fontsize=13, fontweight='bold')
        ax4.grid(True, alpha=0.3, axis='y')
        
        for i, v in enumerate(n_obs):
            ax4.text(i, v + max(n_obs)*0.02, f'{int(v):,}', ha='center', 
                    va='bottom', fontweight='bold', fontsize=10)
    
    # T√≠tulo general
    fig.suptitle('Resumen Visual de Resultados - An√°lisis Doctoral SPP Per√∫', 
                 fontsize=16, fontweight='bold', y=0.98)
    
    # Guardar
    filepath = f"{OUTPUT_DIR}/graficos/{nombre_archivo}.png"
    plt.savefig(filepath, dpi=300, bbox_inches='tight')
    print(f"üíæ Resumen visual guardado: graficos/{nombre_archivo}.png")
    plt.close()

# ==========================================
# EJECUTAR DOCUMENTACI√ìN FINAL
# ==========================================

if __name__ == "__main__":
    print("\n" + "="*70)
    print("FASE 5: DOCUMENTACI√ìN Y VISUALIZACI√ìN FINAL")
    print("="*70)
    
    # Validar que existan resultados
    print("\n" + "="*70)
    print("PASO 0: Validaci√≥n de Resultados")
    print("="*70)
    estado = validar_resultados_disponibles()
    
    if not any(estado.values()):
        print("\n‚ùå ERROR: No hay resultados disponibles de fases anteriores")
        print("   Ejecuta primero: modulo_fase32_estimacion.py")
        exit(1)
    
    # 1. Forest Plot Panel 2
    if estado['panel2_por_fondo']:
        print("\nüìä PASO 1: Generando Forest Plot (Panel 2)")
        modelos_p2_fondos = resultados_modelos['panel2_por_fondo']
        crear_forest_plot_panel2(modelos_p2_fondos)
    else:
        print("\n‚è≠Ô∏è  PASO 1: Omitido (Panel 2 por fondo no disponible)")
    
    # 2. Heatmap Panel 3
    print("\nüìä PASO 2: Heatmap Panel 3")
    resultados_p3 = resultados_modelos.get('panel3', None)
    crear_heatmap_panel3(resultados_p3)
    
    # 3. Tabla Stargazer Panel 1
    if estado['panel1']:
        print("\nüìä PASO 3: Tabla Stargazer (Panel 1)")
        modelo_p1 = resultados_modelos['panel1']
        crear_tabla_stargazer(
            {'Panel 1: Aportes AFP': modelo_p1},
            titulo="Efectos de Volatilidad Global en Aportes al SPP",
            nombre_archivo="tabla_stargazer_panel1"
        )
    else:
        print("\n‚è≠Ô∏è  PASO 3: Omitido (Panel 1 no disponible)")
    
    # 4. Tabla Stargazer Panel 2
    if estado['panel2_por_fondo']:
        print("\nüìä PASO 4: Tabla Stargazer (Panel 2 por fondos)")
        modelos_p2_fondos = resultados_modelos['panel2_por_fondo']
        modelos_p2_tabla = {
            f'Fondo {k} ({["Conservador", "Moderado", "Balanceado", "Agresivo"][k]})': v 
            for k, v in modelos_p2_fondos.items()
        }
        crear_tabla_stargazer(
            modelos_p2_tabla,
            titulo="Flight-to-Quality: Reasignaci√≥n por Tipo de Fondo",
            nombre_archivo="tabla_stargazer_panel2"
        )
    else:
        print("\n‚è≠Ô∏è  PASO 4: Omitido (Panel 2 por fondo no disponible)")
    
    # 5. Tabla comparativa si hay ambos paneles
    if estado['panel1'] and estado['panel2']:
        print("\nüìä PASO 5: Tabla Comparativa (Paneles 1 y 2)")
        crear_tabla_stargazer(
            {
                'Panel 1: Aportes': resultados_modelos['panel1'],
                'Panel 2: Reasignaci√≥n': resultados_modelos['panel2']
            },
            titulo="Comparaci√≥n de Efectos entre Paneles",
            nombre_archivo="tabla_comparativa_paneles"
        )
    else:
        print("\n‚è≠Ô∏è  PASO 5: Omitido (se requieren ambos paneles)")
    
    # 6. Codebook
    print("\nüìä PASO 6: Codebook de Variables")
    codebook = crear_codebook()
    
    # 7. Resumen visual
    print("\nüìä PASO 7: Resumen Visual de Resultados")
    crear_resumen_visual()
    
    # 8. Reporte Ejecutivo
    print("\nüìä PASO 8: Reporte Ejecutivo")
    generar_reporte_ejecutivo()
    
    # ==========================================
    # RESUMEN FINAL
    # ==========================================
    
    print("\n" + "="*70)
    print("‚úÖ FASE 5 COMPLETADA EXITOSAMENTE")
    print("="*70)
    
    print("\nüìä DOCUMENTACI√ìN GENERADA:")
    archivos_generados = []
    
    if estado['panel2_por_fondo']:
        archivos_generados.append("   ‚úÖ 1 Forest Plot (Panel 2 - Flight-to-Quality)")
    
    archivos_generados.extend([
        "   ‚úÖ 1 Heatmap (Panel 3 - placeholder o real)",
        "   ‚úÖ 1 Resumen Visual (4 subplots)",
    ])
    
    n_tablas = sum([
        estado['panel1'],
        estado['panel2_por_fondo'],
        estado['panel1'] and estado['panel2']
    ])
    archivos_generados.append(f"   ‚úÖ {n_tablas} Tabla(s) Stargazer")
    archivos_generados.extend([
        "   ‚úÖ 1 Codebook completo",
        "   ‚úÖ 1 Reporte ejecutivo"
    ])
    
    print("\n".join(archivos_generados))
    
    print("\nüìÅ ARCHIVOS PRINCIPALES GENERADOS:")
    principales = [
        "   ‚Ä¢ graficos/forest_plot_panel2.png",
        "   ‚Ä¢ graficos/resumen_visual_resultados.png",
        "   ‚Ä¢ tablas/tabla_stargazer_panel1.xlsx",
        "   ‚Ä¢ tablas/tabla_stargazer_panel2.xlsx",
        "   ‚Ä¢ codebook_variables.xlsx",
        "   ‚Ä¢ REPORTE_EJECUTIVO.txt"
    ]
    print("\n".join(principales))
    
    print("\n" + "="*70)
    print("üéâ AN√ÅLISIS DOCTORAL COMPLETO - LISTO PARA REVISI√ìN")
    print("="*70)
    
    print("\nüí° SIGUIENTES PASOS RECOMENDADOS:")
    pasos = [
        "   1. üìñ Leer REPORTE_EJECUTIVO.txt (resumen completo)",
        "   2. üìä Revisar gr√°ficos en carpeta graficos/",
        "   3. üìã Examinar tablas en carpeta tablas/",
        "   4. ‚úÖ Verificar que todos los hallazgos sean consistentes",
        "   5. üìù Comenzar redacci√≥n de secci√≥n de Resultados",
        "   6. üîç Preparar an√°lisis de robustez (Fase 3.4)",
        "   7. üìö Conectar hallazgos con literatura existente",
        "   8. üéØ Redactar implicaciones de pol√≠tica p√∫blica",
        "   9. üéì Preparar presentaci√≥n para defensa",
        "   10. ‚úçÔ∏è Revisar y finalizar documento completo"
    ]
    print("\n".join(pasos))
    
    print("\nüìö ESTRUCTURA COMPLETA DE RESULTADOS:")
    print(f"   {OUTPUT_DIR}/")
    estructura = [
        "   ‚îú‚îÄ‚îÄ diagnosticos/    (verificaci√≥n y supuestos)",
        "   ‚îú‚îÄ‚îÄ tablas/          (regresiones y estad√≠sticas)",
        "   ‚îú‚îÄ‚îÄ graficos/        (visualizaciones de publicaci√≥n)",
        "   ‚îú‚îÄ‚îÄ robustez/        (an√°lisis alternativos - si disponible)",
        "   ‚îú‚îÄ‚îÄ panel3/          (ecuaciones individuales - si disponible)",
        "   ‚îú‚îÄ‚îÄ codebook_variables.xlsx",
        "   ‚îú‚îÄ‚îÄ codebook_variables.txt",
        "   ‚îî‚îÄ‚îÄ REPORTE_EJECUTIVO.txt"
    ]
    print("\n".join(estructura))
    
    print("\nüìß SOPORTE:")
    print("   Si encuentras problemas o tienes dudas:")
    print("   ‚Ä¢ Revisa guia_uso_completa.md")
    print("   ‚Ä¢ Verifica que todos los m√≥dulos anteriores se ejecutaron")
    print("   ‚Ä¢ Consulta los comentarios en el c√≥digo fuente")
    
    print("\n" + "="*70)
    print("üéì ¬°√âXITO EN TU TESIS DOCTORAL!")
    print("="*70 + "\n")
